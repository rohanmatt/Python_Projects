# Generated by Django 4.0.6 on 2022-07-28 04:56

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.TextField(blank=True, default=None, max_length=1000, null=True, verbose_name='ADDRESS')),
                ('pincode', models.IntegerField(blank=True, default=None, null=True, verbose_name='Zip Code')),
                ('phone_number', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name='PHONE NUMBER')),
                ('alternate_number', models.CharField(blank=True, default=None, max_length=20, null=True, verbose_name=' ALTERNATE PHONE NUMBER')),
                ('gst', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='GST NUMBER ')),
                ('zone', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='ZONE')),
                ('department', models.CharField(blank=True, choices=[('RECEPTION', 'Receptionist'), ('COLLECTOR', 'Collection'), ('SETUP', 'Fixer')], default=None, max_length=1000, null=True, verbose_name='DEPARTMENT (staff)')),
                ('mpos_serial_number', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='MPOS SERIAL NUMBER (staff)')),
                ('mpos_user_name', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='MPOS USER NAME')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Area',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='CODE')),
                ('description', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='DESCRIPTION')),
            ],
        ),
        migrations.CreateModel(
            name='Bouquet',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='BOQUET NAME')),
                ('price', models.IntegerField(blank=True, default=None, null=True, verbose_name='CHANNEL PRICE')),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='CHANNEL NAME')),
                ('price', models.IntegerField(blank=True, default=None, null=True, verbose_name='CHANNEL PRICE')),
                ('number', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='CHANNEL NUMBER')),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='NAME OF THE DEVICE')),
                ('iemi_number', models.BigIntegerField(blank=True, default=None, null=True, verbose_name='IEMI NUMBER')),
                ('service_provider', models.TextField(blank=True, default=None, max_length=1000, null=True, verbose_name='NETWORK PROVIDER')),
            ],
        ),
        migrations.CreateModel(
            name='Plans',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='PLAN NAME')),
                ('price', models.IntegerField(blank=True, default=None, null=True)),
                ('types', models.CharField(blank=True, choices=[('1', 'Cable'), ('2', 'Broadband')], default=None, max_length=1000, null=True, verbose_name='TYPE')),
                ('bouqets', models.ManyToManyField(blank=True, to='core.bouquet', verbose_name='BOQUET NAME')),
                ('channels', models.ManyToManyField(blank=True, to='core.channel', verbose_name='CHANNEL NAME')),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('type_ticket', models.CharField(blank=True, choices=[('1', 'AUDIO'), ('2', 'MESSAGE'), ('3', 'PICTURE')], default=None, max_length=1000, null=True, verbose_name='TYPE OF TICKET')),
                ('message', models.URLField()),
                ('status', models.CharField(blank=True, choices=[('1', 'OPEN'), ('2', 'CLOSED'), ('3', 'FAILED'), ('4', 'PENDING')], default=None, max_length=1000, null=True, verbose_name='TICKET STATUS')),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_to', to=settings.AUTH_USER_MODEL, verbose_name='Employee Name')),
                ('from_customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='from_customer', to=settings.AUTH_USER_MODEL, verbose_name='Customer Name')),
            ],
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name=' NAME')),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.plans', verbose_name='PLAN NAME')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Customer Name')),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pgid', models.CharField(blank=True, default=None, max_length=1000, null=True, verbose_name='PAYMENT GATEWAY ID')),
                ('status', models.CharField(blank=True, choices=[('1', 'OPEN'), ('2', 'CLOSED'), ('3', 'FAILED'), ('4', 'PENDING')], default=None, max_length=1000, null=True, verbose_name='PAYMENT STATUS')),
                ('supscription', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.subscription', verbose_name='Subscription')),
            ],
        ),
        migrations.AddField(
            model_name='bouquet',
            name='channels',
            field=models.ManyToManyField(blank=True, to='core.channel', verbose_name='ADD CHANNEL'),
        ),
        migrations.AddField(
            model_name='user',
            name='area',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.area'),
        ),
        migrations.AddField(
            model_name='user',
            name='assigned_devices',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.device'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
